call pathogen#infect()

highlight DiffAdd cterm=bold ctermfg=4 ctermbg=7 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=12 ctermbg=7gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=12 ctermbg=7 gui=none guifg=bg guibg=Red
highlight DiffText cterm=bold ctermfg=12 ctermbg=7 gui=none guifg=bg guibg=Red

hi Comment      guifg=#80a0ff ctermfg=darkblue
hi Constant     ctermfg=magenta guifg=#ffa0a0 cterm=none
hi Special      ctermfg=brown guifg=Orange cterm=none gui=none
hi Identifier   ctermfg=cyan guifg=#40ffff cterm=none
hi Statement    ctermfg=yellow cterm=none guifg=#ffff60 gui=none
hi PreProc      ctermfg=magenta guifg=#ff80ff gui=none cterm=none
hi type         ctermfg=green guifg=#60ff60 gui=none cterm=none
hi Underlined   cterm=underline term=underline
hi Ignore       guifg=#80a0ff ctermfg=darkblue

" search hilight: yellow => red
hi Search term=standout cterm=bold ctermfg=7 ctermbg=1
" cscope tags: white => green
hi ModeMsg ctermfg=magenta

set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
if has("win32")
    set fileencoding=chinese
    "解决菜单乱码
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    "解决console输出乱码
    language messages zh_CN.utf-8
    set guifont=Consolas:h11:cANSI
    source $VIMRUNTIME/vimrc_example.vim
    source $VIMRUNTIME/mswin.vim
    behave mswin
else
    set fileencoding=utf-8
endif

" Uncomment the following to have Vim jump to the last position when
" " reopening a file
if has("autocmd")
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

if &diff
"    colors delek
    colors evening
endif

" git mergetool use vimdiff
set laststatus=2 "show the status line
set statusline=
set statusline+=\[%n]                                  "buffernr
set statusline+=\ %<%F\                                "文件路径
set statusline+=\ %y\                                  "文件类型
"set statusline+=\ %{''.(&fenc!=''?&fenc:&enc).''}      "编码1
"set statusline+=\ %{(&bomb?\",BOM\":\"\")}\            "编码2
"set statusline+=\ %{&ff}\                              "文件系统(dos/unix..)
"set statusline+=\ %{&spelllang}\%{HighlightSearch()}\  "语言 & 是否高亮，H表示高亮?
"set statusline+=\ %=\ row:%l/%L\ (%03p%%)\             "光标所在行号/总行数 (百分比)
set statusline+=\ %=\ row:%l/%L\              "光标所在行号/总行数 (百分比)
set statusline+=\ col:%03c\                            "光标所在列
set statusline+=\ \ %m%r%w\ %P\ \                      "Modified? Read only? Top/bottom
function! HighlightSearch()
    if &hls
        return 'H'
    else
        return ''
    endif
endfunction

"map <silent> <leader>1 :diffget 1<CR> :diffupdate<CR>
"map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
"map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
"map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>
nmap ,1 :diffget 1<CR> :diffupdate<CR>
nmap ,2 :diffget 2<CR> :diffupdate<CR>
nmap ,3 :diffget 3<CR> :diffupdate<CR>
nmap ,4 :diffget 4<CR> :diffupdate<CR>

"""""""""indentLine"""""""""""""
" Vim
let g:indentLine_color_term = 239

"GVim
let g:indentLine_color_gui = '#A4E57E'

" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

""Change Indent Char
"¦, ┆, ︙ or │
let g:indentLine_char = '|'

""Disable by default
let g:indentLine_enabled = 1

"map <F5> : IndentLinesToggle<CR>

""""""""""""""""""""""""""""""""
set nocompatible
syntax on

nnoremap <F5> :call MouseToggle()<CR>
function! MouseToggle()
	if &mouse == ""
		let &mouse="a"
	else
		let &mouse=""
	endif
endfunction
set mouse=a

"set cc=80

set list lcs=tab:\|\ 
"设置折叠
"set fdm=indent
"set fdm=marker

"自动换行
set wrap

"文本行超过一定长度时自动换行
set textwidth=78
"从窗口右侧向左数的列数来自动换行,如果 textwidth 选项不等于零，本选项无效。
set wrapmargin=2
"使光标距窗口上下保留 2 行
set scrolloff=1

"显示行号
set number

"检测文件的类型
filetype on

"记录历史的行数
set history=1000

"set noautoindent
"set nosmartindent
"set nocindent

"自动对齐
"set autoindent
set cindent

"智能选择对齐方式
"set smartindent

"tab为4个空格
set tabstop=8

"turn tab to space
"set expandtab

"当前行之间交错时使用4个空格
"set shiftwidth=4

"设置匹配模式，输入做括号会出现右括号
set showmatch

"编辑时显示光标状态
set ruler

"当前行高亮
set cursorline
"hi CursorLine cterm=NONE ctermbg=NONE ctermfg=magenta guibg=NONE guifg=NONE
"hi CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE

"快速匹配
set incsearch
set hlsearch

"设置python配置
if has("autocmd")
autocmd FileType python set tabstop=4 | set expandtab | set shiftwidth=4 | set autoindent
endif

"修改文件自动备份
if has("vms")
    set nobackup
"else
"    set backup
endif

"禁止创建.swp文件
set noswapfile

inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i
"inoremap < <><ESC>i
"inoremap " ""<ESC>i
"inoremap ' ''<ESC>i

""调整窗口大小快捷键
nmap    r-  :resize -10<CR>
nmap    r=  :resize +10<CR>
nmap    r,  :vertical resize -10<CR>
nmap    r.  :vertical resize +10<CR>

"""""""""""""设置开启ctags"""""""""""""
"在这设置ctags -R 后生成的tags文件所在目录，下面有介绍，如果需要配置多个tags。只需如下再添加即可
set tags=tags;
"set tags+=/home/liutao/oss/linux/linux-4.4.96/tags
"set tags+=/home/liutao/oss/linux/linux-3.16.49/tags
"set tags+=/home/liutao/oss/dpdk/dpdk-stable-16.11.3/tags
"set tags+=/home/liutao/oss/dpdk/dpdk-17.11/tags
"set tags+=/home/liutao/work/git/dpdk/tags
"set tags+=/home/liutao/work/git/AliOS-Things/tags
"set tags+=/home/liutao/work/extundelete-0.2.4/src/tags;
set autochdir

map 7 ^
map 8 $
map 9 %

map <F6> [c  ""上一个diff""
map <F7> ]c  ""下一个diff""

"let g:pep8_map='<F10>'
"mark settings
let mapleader = ","
let g:mwDefaultHighlightingPalette = 'extended'
"let g:mwDefaultHighlightingPalette = 'maximum'
"let g:mwDefaultHighlightingNum = 12
map <F2> ,m

"map <F9> <C-]>j
map <F8> <C-T>

nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l

""""""""""""""""SourceExplore""""""""""""""""
" // The switch of the Source Explorer
"nmap <F5> :SrcExplToggle<CR>

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 8

" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100

" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"

" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to avoid conflicts, the Source Explorer should know what plugins "
" // except itself are using buffers. And you need add their buffer names into "
" // below listaccording to the command ":buffers!"                            "
let g:SrcExpl_pluginList = [ 
         \ "__Tag_List__", 
         \ "_NERD_tree_" 
     \ ] 

" // Enable/Disable the local definition searching, and note that this is not  "
" // guaranteed to work, the Source Explorer doesn't check the syntax for now. "
" // It only searches for a match with the keyword according to command 'gd'   "
let g:SrcExpl_searchLocalDef = 1

" // Do not let the Source Explorer update the tags file when opening          "
let g:SrcExpl_isUpdateTags = 0

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to "
" //  create/update a tags file                                                "
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
"                                                                              "
" // Set "<F12>" key for updating the tags file artificially                   "
"let g:SrcExpl_updateTagsKey = "<F12>"

" // Set "<F3>" key for displaying the previous definition in the jump list    "
"let g:SrcExpl_prevDefKey = "<F3>"

" // Set "<F4>" key for displaying the next definition in the jump list        "
"let g:SrcExpl_nextDefKey = "<F4>"

"""""""""""""""设置tagbar"""""""""""""""
nmap <F3> :TagbarToggle<CR>   "设置快捷键
let g:tagbar_width = 30       "设置宽度，默认为40
autocmd VimEnter * nested :call tagbar#autoopen(1)    "打开vim时自动打开tagbar
let g:tagbar_left = 1         "在左侧
"let g:tagbar_right = 1        "在右侧
let g:tagbar_sort = 0           "不按name排序

"""""""""""""""""Taglist设置"""""""""""""""""
"map <F3> : TlistToggle<CR>  ""按下F3就可以呼出了""
""let Tlist_Auto_Open = 1
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1

"""""""""""""""""NERDtree"""""""""""""""""
map <F4> : NERDTreeToggle<CR>
let NERDTreeWinPos="right"
let NERDTreeShowBookmarks=1

""""""""""""""""""""""cscope设置""""""""""""""""""
"set cscopequickfix=s-,c-,d-,i-,t-,e-
if has("cscope")
	"disable key mapping in autoload_cscope.vim
	let g:autocscope_menus=0

	set csprg=/usr/bin/cscope
	set csto=1
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	endif
	set csverb

	nmap <F9> :cs find g <C-R>=expand("<cword>")<CR><CR>

	nmap <F10>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <F10>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <F10>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <F10>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <F10>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <F10>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <F10>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <F10>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif
